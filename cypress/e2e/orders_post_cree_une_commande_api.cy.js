describe('API - CrÃ©ation ou validation dâ€™une commande', () => {

  let token;

  beforeEach(() => {
    // âœ… On utilise la commande custom pour se connecter
    cy.login().then(() => {
      token = Cypress.env('authToken'); // âœ… token est bien dÃ©fini ici
    });
  });

  it('doit crÃ©er ou valider une commande en cours', () => {
    // ðŸ§¾ DonnÃ©es de la commande Ã  envoyer
    const orderData = {
      firstname: "test",
      lastname: "test",
      address: "42, rue Hardenberg",
      zipCode: "92220",
      city: "Bagneux"
    };

    // ðŸš€ Envoi de la requÃªte POST Ã  lâ€™API
    cy.request({
      method: 'POST',
      url: `${Cypress.env('apiUrl')}/orders`,
      headers: {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: orderData,
      failOnStatusCode: false
    }).then((res) => {
      // âœ… VÃ©rifie que la requÃªte a rÃ©ussi
      expect(res.status).to.be.oneOf([200, 201]);

      // âœ… VÃ©rifie les champs de la rÃ©ponse principale
      expect(res.body).to.have.all.keys(
        'id', 'firstname', 'lastname', 'address', 'zipCode', 'city', 'date', 'validated', 'orderLines'
      );

      // âœ… VÃ©rifie que les champs renvoyÃ©s correspondent aux donnÃ©es envoyÃ©es
      expect(res.body.firstname).to.eq(orderData.firstname);
      expect(res.body.lastname).to.eq(orderData.lastname);
      expect(res.body.address).to.eq(orderData.address);
      expect(res.body.zipCode).to.eq(orderData.zipCode);
      expect(res.body.city).to.eq(orderData.city);

      // âœ… VÃ©rifie les types de donnÃ©es
      expect(res.body.id).to.be.a('number');
      expect(res.body.validated).to.be.a('boolean');
      expect(res.body.date).to.be.a('string');
      expect(res.body.orderLines).to.be.an('array');

      // âœ… VÃ©rifie la structure dâ€™un Ã©lÃ©ment dans orderLines (si prÃ©sent)
      if (res.body.orderLines.length > 0) {
        const orderLine = res.body.orderLines[0];
        expect(orderLine).to.have.keys('id', 'product', 'quantity');
        expect(orderLine.product).to.have.keys('id', 'name', 'description', 'price', 'picture');
      }
    });
  });
});
